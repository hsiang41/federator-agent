apiVersion: v1
kind: ConfigMap
metadata:
  name: federatorai-agent-config
  namespace: federatorai
data:
  transmitter.toml: |-
    [log]
     set-logcallers = true
     output-level = "debug" # debug, info, warn, error, fatal, none

    [input_jobs]
        [input_jobs.datapipe_input]
        name = "datapipe_input"
        schedule-spec = "*/5 * * * * ?"
        lib-path = "/lib/inputlib/datapipe.so"
        lib-configuration = "/etc/alameda/federatorai-agent/input/datapipe.toml"

        [input_jobs.datapipe_prometheus]
        name = "datapipe_prometheus"
        schedule-spec = "*/30 * * * * ?"
        lib-path = "/lib/inputlib/datapipe_prometheus.so"
        lib-configuration = "/etc/alameda/federatorai-agent/input/datapipe_prometheus.toml"

    [output_jobs]
        [output_jobs.datapipe_output]
        name = "datapipe_output"
        schedule-spec = "*/30 * * * * ?"
        lib-path = "/lib/outputlib/datapipe_recommender.so"
        lib-configuration = "/etc/alameda/federatorai-agent/output/datapipe.toml"

  datapipe.toml: |
    data_granularity_sec = 30
    data_amount_init_sec = 300
    data_amount_sec = 3600

    [datapipe]
    address = "alameda-datapipe.federatorai.svc:50060"

    [datapipe."retry-interval"]
    default = 3

  datapipe_prometheus.toml: |
    [global]
    prometheus_scrape_step_seconds = 15
    prometheus_scrape_frequency_seconds = 300
    target_database = "alameda_prometheus"
    target_address = "127.0.0.1:50060"
    target_user = ""
    target_password = ""

    [[measurement]]
    name = "apiserver_request_count"
    expr = "apiserver_request_count"
    tags = ["client", "code", "instance", "namespace", "resource", "scope", "verb"]
    [measurement.element.value]
    type = "int"            # <element.<Tag/Field> is prometheus label name, type define "int/float/string<default: string>"

    [[measurement]]
    name = "kube_pod_container_status_restarts_total"
    expr = "kube_pod_container_status_restarts_total"
    tags = ["container", "instance", "namespace", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "kube_node_spec_unschedulable"
    expr = "kube_node_spec_unschedulable"
    tags = ["instance", "namespace", "node", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "kube_node_spec_unschedulable"
    expr = "kube_node_spec_unschedulable"
    tags = ["instance", "namespace", "node", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "kube_node_status_capacity_cpu_cores"
    expr = "kube_node_status_capacity_cpu_cores"
    tags = ["instance", "namespace", "node", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "kube_node_status_capacity_memory_bytes"
    expr = "kube_node_status_capacity_memory_bytes"
    tags = ["instance", "namespace", "node", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "kube_pod_container_resource_requests_cpu_cores"
    expr = "kube_pod_container_resource_requests_cpu_cores"
    tags = ["container", "instance", "namespace", "node", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "kube_pod_container_resource_limits_cpu_cores"
    expr = "kube_pod_container_resource_limits_cpu_cores"
    tags = ["container", "instance", "namespace", "node", "pod"]
    [measurement.element.value]
    type = "float"

    [[measurement]]
    name = "kube_pod_container_resource_requests_memory_bytes"
    expr = "kube_pod_container_resource_requests_memory_bytes"
    tags = ["container", "instance", "namespace", "node", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "kube_pod_container_resource_limits_memory_bytes"
    expr = "kube_pod_container_resource_limits_memory_bytes"
    tags = ["container", "instance", "namespace", "node", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = ":kube_pod_info_node_count:"
    expr = ":kube_pod_info_node_count:"
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "node:node_cpu_utilisation:avg1m"
    expr = "node:node_cpu_utilisation:avg1m"
    tags = ["node"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "node:node_num_cpu:sum"
    expr = "node:node_num_cpu:sum"
    tags = ["node"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "node:node_memory_utilisation:ratio"
    expr = "node:node_memory_utilisation:ratio"
    tags = ["node"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "node:node_memory_utilisation:"
    expr = "node:node_memory_utilisation:"
    tags = ["node"]
    [measurement.element.value]
    type = "int"

    [[measurement]]
    name = "node_filesystem_size_bytes"
    expr = "node_filesystem_size_bytes"
    tags = ["device", "fstype", "instance", "mountpoint", "namespace", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]] # 18
    name = "node_filesystem_avail_bytes"
    expr = "node_filesystem_avail_bytes"
    tags = ["device", "fstype", "instance", "mountpoint", "namespace", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]] # 19
    name = "node_namespace_pod:kube_pod_info:"
    expr = "node_namespace_pod:kube_pod_info:"
    tags = ["namespace", "node", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]] # 20
    name = "node:node_disk_utilisation:avg_irate"
    expr = "node:node_disk_utilisation:avg_irate"
    tags = ["node"]
    [measurement.element.value]
    type = "float"

    [[measurement]] # 21
    name = "kube_node_labels"
    expr = "kube_node_labels"
    tags = ["instance", "label_kubernetes_io_hostname", "namespace", "node", "pod"]
    [measurement.element.value]
    type = "int"

    [[measurement]] # 101
    name = "cmd_api_server_up"
    expr = "(sum(up{job=~\".*apiserver.*\"} == 1) / count(up{job=~\".*apiserver.*\"}))"
    [measurement.element.value]
    type = "int"

    [[measurement]] # 102
    name = "cmd_api_server_request_error_rates"
    expr = "sum by(instance) (rate(apiserver_request_count{code=~\"5..\"}[5m])) / sum by(instance) (rate(apiserver_request_count[5m]))"
    tags = ["instance"]
    [measurement.element.value]
    type = "float"

    [[measurement]] # 103
    name = "cmd_crashing_control_plane_pods"
    expr = "count(increase(kube_pod_container_status_restarts_total{namespace=~\"kube-system\"}[1h]) > 5)"
    [measurement.element.value]
    type = "int"

    [[measurement]] # 104
    name = "cmd_crashing_pods"
    expr = "count(increase(kube_pod_container_status_restarts_total[1h]) > 5)"
    [measurement.element.value]
    type = "int"

    [[measurement]] # 107
    name = "cmd_nodes_up"
    expr = "(sum(up{job=\"kubelet\"} == 1) / count(up{job=\"kubelet\"}))"
    [measurement.element.value]
    type = "int"

    [[measurement]] # 110
    name = "cmd_nodes_unschedulable"
    expr = "sum(kube_node_spec_unschedulable) / count(up{job=\"kubelet\"})"
    [measurement.element.value]
    type = "int"

    [[measurement]] # 111
    name = "cmd_cpu_utilisation"
    expr = "node:node_cpu_utilisation:avg1m * node:node_num_cpu:sum / scalar(sum(node:node_num_cpu:sum))"
    tags = ["node"]
    [measurement.element.value]
    type = "float"

    [[measurement]] # 113
    name = "cmd_disk_capacity"
    expr = "sum(max(node_filesystem_size_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"} - node_filesystem_avail_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"}) by (device,pod,namespace)) by (pod,namespace) / scalar(sum(max(node_filesystem_size_bytes{fstype=~\"ext[234]|btrfs|xfs|zfs\"}) by (device,pod,namespace))) * on (namespace, pod) group_left (node) node_namespace_pod:kube_pod_info:"
    tags = ["namespace", "node", "pod"]
    [measurement.element.value]
    type = "float"

    [[measurement]] # 114
    name = "cmd_disk_io_utilisation"
    expr = "node:node_disk_utilisation:avg_irate / scalar(:kube_pod_info_node_count:)"
    tags = ["node"]
    [measurement.element.value]
    type = "float"

    [[measurement]] # 117
    name = "cmd_top_cpu_pods"
    expr = "topk(5, sum(rate(container_cpu_usage_seconds_total{image!=\"\",name=~\"^k8s_.*\",container_name!=\"POD\"}[2m]) * on (namespace, pod_name) group_left (node) label_replace(node_namespace_pod:kube_pod_info:{node=\"$node\"}, \"pod_name\", \"$1\", \"pod\", \"(.*)\"))  by (pod_name))"
    tags = ["node", "pod_name"]
    [measurement.element.value]
    type = "float"

    [[measurement]] # 120
    name = "cmd_top_5_memory_intense_pods"
    expr = "topk(5, sum(container_memory_usage_bytes{image!=\"\"} * on (namespace, pod_name) group_left (node) label_replace(node_namespace_pod:kube_pod_info:{node=\"$node\"}, \"pod_name\", \"$1\", \"pod\", \"(.*)\"))  by (pod_name))"
    tags = ["node", "pod_name"]
    [measurement.element.value]
    type = "int"

    [[measurement]] # 121
    name = "cmd_pods_running_status_count"
    expr = "sum(kube_pod_status_phase * on (namespace, pod) group_left (node) node_namespace_pod:kube_pod_info:{node=\"$node\"} ) by (phase)"
    tags = ["node", "phase"]
    [measurement.element.value]
    type = "int"

    [[measurement]] # 122
    name = "cmd_current_running_pods-cpu_usage"
    expr = "sum(namespace_pod_name_container_name:container_cpu_usage_seconds_total:sum_rate{container_name!=\"\",container_name!=\"POD\",pod_name!=\"\"} * on (namespace, pod_name) group_left (node) label_replace(node_namespace_pod:kube_pod_info:{node=\"$node\"}, \"pod_name\", \"$1\", \"pod\", \"(.*)\")) by (pod_name)"
    tags = ["node", "pod_name"]
    [measurement.element.value]
    type = "float"

    [[measurement]] # 123
    name = "cmd_current_running_pods-cpu_request"
    expr = "sum(label_replace( sum(avg_over_time(kube_pod_container_resource_requests_cpu_cores{container!=\"\",container!=\"POD\",node=\"$node\"}[10m])) by (pod),  \"pod_name\",\"$1\",\"pod\",\"(.+)\") or up * 0 ) by (pod_name)"
    tags = ["node", "pod_name"]
    [measurement.element.value]
    type = "float"

    [[measurement]] # 124
    name = "cmd_current_running_pods-cpu_limit"
    expr = "sum(label_replace( sum(avg_over_time(kube_pod_container_resource_limits_cpu_cores{container!=\"\",container!=\"POD\",node=\"$node\"}[10m])) by (pod), \"pod_name\",\"$1\",\"pod\",\"(.+)\") or up * 0 ) by (pod_name)"
    tags = ["node", "pod_name"]
    [measurement.element.value]
    type = "float"

    [[measurement]] # 125
    name = "cmd_current_running_pods-mem_usage"
    expr = "sum(container_memory_usage_bytes{container_name!=\"POD\", container_name!=\"\"} * on (namespace, pod_name) group_left (node) label_replace(node_namespace_pod:kube_pod_info:{node=\"$node\"}, \"pod_name\", \"$1\", \"pod\", \"(.*)\") ) by (pod_name)"
    tags = ["node", "pod_name"]
    [measurement.element.value]
    type = "int"

    [[measurement]] # 126
    name = "cmd_current_running_pods-mem_request"
    expr = "sum(label_replace(label_replace(sum(avg_over_time(kube_pod_container_resource_requests_memory_bytes{container!=\"\",container!=\"POD\",node=\"$node\"}[10m])) by (pod),\"container_name\",\"$1\",\"container\",\"(.+)\"), \"pod_name\",\"$1\",\"pod\",\"(.+)\") or up * 0) by (pod_name)"
    tags = ["node", "pod_name"]
    [measurement.element.value]
    type = "int"

    [[measurement]] # 127
    name = "cmd_current_running_pods-mem_limit"
    expr = "sum(label_replace(label_replace( sum(avg_over_time(kube_pod_container_resource_limits_memory_bytes{container!=\"\",container!=\"POD\",node=\"$node\"}[10m])) by (pod), \"container_name\",\"$1\",\"container\",\"(.+)\"), \"pod_name\",\"$1\",\"pod\",\"(.+)\") or up * 0) by (pod_name)"
    tags = ["node", "pod_name"]
    [measurement.element.value]
    type = "int"

    [[measurement]] # 128
    name = "cmd_current_running_pods-restart_time"
    expr = "sum(label_replace(kube_pod_container_status_restarts_total{container!=\"\",container!=\"POD\",pod !=\"\"}, \"pod_name\", \"$1\", \"pod\", \"(.*)\") * on (namespace, pod) group_left (node) node_namespace_pod:kube_pod_info:{node=\"$node\"}) by (pod_name)"
    tags = ["node", "pod_name"]
    [measurement.element.value]
    type = "int"

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: federatorai-agent
  namespace: federatorai
spec:
  selector:
    matchLabels:
      app: federatorai-agent
  replicas: 1
  template:
    metadata:
      labels:
        app: federatorai-agent
    spec:
      containers:
      - name: federatorai-agent
        image: docker-registry.default.svc:5000/federatorai-agent/transmitter:latest
        imagePullPolicy: Always
        volumeMounts:
          - name: federatorai-agent-config
            mountPath: /etc/alameda/federatorai-agent/transmitter.toml
            subPath: transmitter.toml
          - name: federatorai-agent-config
            mountPath: /etc/alameda/federatorai-agent/input/datapipe.toml
            subPath: datapipe.toml
          - name: federatorai-agent-config
            mountPath: /etc/alameda/federatorai-agent/output/datapipe.toml
            subPath: datapipe.toml
          - name: federatorai-agent-config
            mountPath: /etc/alameda/federatorai-agent/input/datapipe_prometheus.toml
            subPath: datapipe_prometheus.toml
      volumes:
        - name: federatorai-agent-config
          configMap:
            name: federatorai-agent-config
          items:
            - key: transmitter.toml
              path: transmitter.toml
            - key: datapipe.toml
              path: datapipe.toml
            - key: datapipe_prometheus.toml
              path: datapipe_prometheus.toml