// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datahub/metrics/types.proto

package metrics // import "github.com/containers-ai/api/datahub/metrics"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Metric type. A metric may be either CPU or memory
type MetricType int32

const (
	MetricType_METRIC_TYPE_UNDEFINED        MetricType = 0
	MetricType_CPU_USAGE_SECONDS_PERCENTAGE MetricType = 1
	MetricType_MEMORY_USAGE_BYTES           MetricType = 2
)

var MetricType_name = map[int32]string{
	0: "METRIC_TYPE_UNDEFINED",
	1: "CPU_USAGE_SECONDS_PERCENTAGE",
	2: "MEMORY_USAGE_BYTES",
}
var MetricType_value = map[string]int32{
	"METRIC_TYPE_UNDEFINED":        0,
	"CPU_USAGE_SECONDS_PERCENTAGE": 1,
	"MEMORY_USAGE_BYTES":           2,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_types_895e1c3007b1c4c1, []int{0}
}

// Represents a data point of time-series metric data
type Sample struct {
	StartTime            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	NumValue             string               `protobuf:"bytes,3,opt,name=num_value,json=numValue,proto3" json:"num_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_895e1c3007b1c4c1, []int{0}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample.Unmarshal(m, b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
}
func (dst *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(dst, src)
}
func (m *Sample) XXX_Size() int {
	return xxx_messageInfo_Sample.Size(m)
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Sample) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Sample) GetNumValue() string {
	if m != nil {
		return m.NumValue
	}
	return ""
}

// Represents a piece of metreic data
type MetricData struct {
	// data can be time series or non-time series
	Data                 []*Sample `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Granularity          int64     `protobuf:"varint,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MetricData) Reset()         { *m = MetricData{} }
func (m *MetricData) String() string { return proto.CompactTextString(m) }
func (*MetricData) ProtoMessage()    {}
func (*MetricData) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_895e1c3007b1c4c1, []int{1}
}
func (m *MetricData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricData.Unmarshal(m, b)
}
func (m *MetricData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricData.Marshal(b, m, deterministic)
}
func (dst *MetricData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricData.Merge(dst, src)
}
func (m *MetricData) XXX_Size() int {
	return xxx_messageInfo_MetricData.Size(m)
}
func (m *MetricData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricData.DiscardUnknown(m)
}

var xxx_messageInfo_MetricData proto.InternalMessageInfo

func (m *MetricData) GetData() []*Sample {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MetricData) GetGranularity() int64 {
	if m != nil {
		return m.Granularity
	}
	return 0
}

func init() {
	proto.RegisterType((*Sample)(nil), "containersai.datahub.metrics.Sample")
	proto.RegisterType((*MetricData)(nil), "containersai.datahub.metrics.MetricData")
	proto.RegisterEnum("containersai.datahub.metrics.MetricType", MetricType_name, MetricType_value)
}

func init() { proto.RegisterFile("datahub/metrics/types.proto", fileDescriptor_types_895e1c3007b1c4c1) }

var fileDescriptor_types_895e1c3007b1c4c1 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x6b, 0xf2, 0x30,
	0x18, 0xc7, 0xdf, 0xea, 0x8b, 0xd3, 0x78, 0x91, 0xc0, 0x86, 0x53, 0x61, 0x45, 0x76, 0x90, 0xb1,
	0xa5, 0xe0, 0x18, 0x6c, 0x47, 0x6d, 0x33, 0xf1, 0xd0, 0x2a, 0x6d, 0x1d, 0xb8, 0x4b, 0x79, 0xd4,
	0xac, 0x06, 0xda, 0xb4, 0xb4, 0xe9, 0xc0, 0x4f, 0xb2, 0xaf, 0x3b, 0x9a, 0x2a, 0x1b, 0x3b, 0x6c,
	0xc7, 0x27, 0xfc, 0x7e, 0x4f, 0xfe, 0xff, 0x04, 0xf5, 0x77, 0x20, 0x61, 0x5f, 0x6c, 0x8c, 0x98,
	0xc9, 0x8c, 0x6f, 0x73, 0x43, 0x1e, 0x52, 0x96, 0x93, 0x34, 0x4b, 0x64, 0x82, 0x07, 0xdb, 0x44,
	0x48, 0xe0, 0x82, 0x65, 0x39, 0x70, 0x72, 0x24, 0xc9, 0x91, 0xec, 0x5d, 0x85, 0x49, 0x12, 0x46,
	0xcc, 0x50, 0xec, 0xa6, 0x78, 0x33, 0x24, 0x8f, 0x59, 0x2e, 0x21, 0x4e, 0x2b, 0x7d, 0xf8, 0xa1,
	0xa1, 0x86, 0x07, 0x71, 0x1a, 0x31, 0xfc, 0x84, 0x50, 0x2e, 0x21, 0x93, 0x41, 0xc9, 0x74, 0x35,
	0x5d, 0x1b, 0xb5, 0xc7, 0x3d, 0x52, 0x2d, 0x20, 0xa7, 0x05, 0xc4, 0x3f, 0x2d, 0x70, 0x5b, 0x8a,
	0x2e, 0x67, 0xfc, 0x80, 0x9a, 0x4c, 0xec, 0x2a, 0xb1, 0xf6, 0xa7, 0x78, 0xc6, 0xc4, 0x4e, 0x69,
	0x7d, 0xd4, 0x12, 0x45, 0x1c, 0xbc, 0x43, 0x54, 0xb0, 0x6e, 0x5d, 0xd7, 0x46, 0x2d, 0xb7, 0x29,
	0x8a, 0xf8, 0xa5, 0x9c, 0x87, 0x7b, 0x84, 0x6c, 0xd5, 0xc2, 0x02, 0x09, 0xf8, 0x11, 0xfd, 0x2f,
	0xbb, 0x75, 0x35, 0xbd, 0x3e, 0x6a, 0x8f, 0xaf, 0xc9, 0x6f, 0xad, 0x49, 0x55, 0xc8, 0x55, 0x06,
	0xd6, 0x51, 0x3b, 0xcc, 0x40, 0x14, 0x11, 0x64, 0x5c, 0x1e, 0x54, 0xbc, 0xba, 0xfb, 0xfd, 0xe8,
	0x06, 0x4e, 0x37, 0xf9, 0x87, 0x94, 0xe1, 0x4b, 0x74, 0x6e, 0x53, 0xdf, 0x9d, 0x9b, 0x81, 0xbf,
	0x5e, 0xd2, 0x60, 0xe5, 0x58, 0xf4, 0x79, 0xee, 0x50, 0xab, 0xf3, 0x0f, 0xeb, 0x68, 0x60, 0x2e,
	0x57, 0xc1, 0xca, 0x9b, 0xcc, 0x68, 0xe0, 0x51, 0x73, 0xe1, 0x58, 0x5e, 0xb0, 0xa4, 0xae, 0x49,
	0x1d, 0x7f, 0x32, 0xa3, 0x1d, 0x0d, 0x5f, 0x20, 0x6c, 0x53, 0x7b, 0xe1, 0xae, 0x8f, 0xd0, 0x74,
	0xed, 0x53, 0xaf, 0x53, 0x9b, 0x92, 0xd7, 0xdb, 0x90, 0xcb, 0x32, 0xe3, 0x36, 0x89, 0x8d, 0xaf,
	0xf0, 0x77, 0xc0, 0x0d, 0x48, 0xb9, 0xf1, 0xe3, 0x87, 0x37, 0x0d, 0xf5, 0x6c, 0xf7, 0x9f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x11, 0xc8, 0x07, 0x83, 0xfb, 0x01, 0x00, 0x00,
}
