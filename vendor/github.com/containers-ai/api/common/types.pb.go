// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/types.proto

package common // import "github.com/containers-ai/api/common"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataType int32

const (
	DataType_DATATYPE_UNDEFINED DataType = 0
	DataType_DATATYPE_BOOL      DataType = 1
	DataType_DATATYPE_INT       DataType = 2
	DataType_DATATYPE_INT8      DataType = 3
	DataType_DATATYPE_INT16     DataType = 4
	DataType_DATATYPE_INT32     DataType = 5
	DataType_DATATYPE_INT64     DataType = 6
	DataType_DATATYPE_UINT      DataType = 7
	DataType_DATATYPE_UINT8     DataType = 8
	DataType_DATATYPE_UINT16    DataType = 9
	DataType_DATATYPE_UINT32    DataType = 10
	DataType_DATATYPE_UTIN64    DataType = 11
	DataType_DATATYPE_FLOAT32   DataType = 12
	DataType_DATATYPE_FLOAT64   DataType = 13
	DataType_DATATYPE_STRING    DataType = 14
)

var DataType_name = map[int32]string{
	0:  "DATATYPE_UNDEFINED",
	1:  "DATATYPE_BOOL",
	2:  "DATATYPE_INT",
	3:  "DATATYPE_INT8",
	4:  "DATATYPE_INT16",
	5:  "DATATYPE_INT32",
	6:  "DATATYPE_INT64",
	7:  "DATATYPE_UINT",
	8:  "DATATYPE_UINT8",
	9:  "DATATYPE_UINT16",
	10: "DATATYPE_UINT32",
	11: "DATATYPE_UTIN64",
	12: "DATATYPE_FLOAT32",
	13: "DATATYPE_FLOAT64",
	14: "DATATYPE_STRING",
}
var DataType_value = map[string]int32{
	"DATATYPE_UNDEFINED": 0,
	"DATATYPE_BOOL":      1,
	"DATATYPE_INT":       2,
	"DATATYPE_INT8":      3,
	"DATATYPE_INT16":     4,
	"DATATYPE_INT32":     5,
	"DATATYPE_INT64":     6,
	"DATATYPE_UINT":      7,
	"DATATYPE_UINT8":     8,
	"DATATYPE_UINT16":    9,
	"DATATYPE_UINT32":    10,
	"DATATYPE_UTIN64":    11,
	"DATATYPE_FLOAT32":   12,
	"DATATYPE_FLOAT64":   13,
	"DATATYPE_STRING":    14,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}
func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_types_7248dc28f167d53c, []int{0}
}

type ColumnType int32

const (
	ColumnType_COLUMNTYPE_UDEFINED ColumnType = 0
	ColumnType_COLUMNTYPE_TAG      ColumnType = 1
	ColumnType_COLUMNTYPE_FIELD    ColumnType = 2
)

var ColumnType_name = map[int32]string{
	0: "COLUMNTYPE_UDEFINED",
	1: "COLUMNTYPE_TAG",
	2: "COLUMNTYPE_FIELD",
}
var ColumnType_value = map[string]int32{
	"COLUMNTYPE_UDEFINED": 0,
	"COLUMNTYPE_TAG":      1,
	"COLUMNTYPE_FIELD":    2,
}

func (x ColumnType) String() string {
	return proto.EnumName(ColumnType_name, int32(x))
}
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_types_7248dc28f167d53c, []int{1}
}

func init() {
	proto.RegisterEnum("containersai.common.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("containersai.common.ColumnType", ColumnType_name, ColumnType_value)
}

func init() { proto.RegisterFile("common/types.proto", fileDescriptor_types_7248dc28f167d53c) }

var fileDescriptor_types_7248dc28f167d53c = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd1, 0xc1, 0x4e, 0x83, 0x40,
	0x14, 0x05, 0x50, 0x5b, 0xb5, 0xd6, 0x67, 0x8b, 0xcf, 0xc1, 0xe8, 0x07, 0x18, 0x37, 0x4d, 0x2c,
	0x69, 0x21, 0xc4, 0x2d, 0x2d, 0xd0, 0x4c, 0x82, 0x83, 0xd1, 0x61, 0xa1, 0x1b, 0x33, 0x6d, 0x88,
	0x92, 0x08, 0x43, 0x5a, 0xba, 0xe8, 0xc7, 0xf9, 0x6f, 0x06, 0x48, 0x28, 0xd3, 0x6e, 0xcf, 0xdc,
	0xcc, 0x4d, 0xde, 0x05, 0xb2, 0x92, 0x69, 0x2a, 0x33, 0xa3, 0xd8, 0xe5, 0xf1, 0x66, 0x9c, 0xaf,
	0x65, 0x21, 0x89, 0xbe, 0x92, 0x59, 0x21, 0x92, 0x2c, 0x5e, 0x6f, 0x44, 0x32, 0xae, 0x03, 0xa3,
	0xbf, 0x2e, 0xf4, 0x5d, 0x51, 0x08, 0xbe, 0xcb, 0x63, 0x72, 0x07, 0xc4, 0x75, 0xb8, 0xc3, 0x3f,
	0x5e, 0xbd, 0xaf, 0x88, 0xb9, 0x9e, 0x4f, 0x99, 0xe7, 0xe2, 0x09, 0xb9, 0x81, 0x61, 0xe3, 0xb3,
	0x30, 0x0c, 0xb0, 0x43, 0x10, 0x06, 0x0d, 0x51, 0xc6, 0xb1, 0xab, 0x84, 0x28, 0xe3, 0xcf, 0x78,
	0x4a, 0x08, 0x68, 0x6d, 0x9a, 0xd8, 0x78, 0x76, 0x68, 0xe6, 0x14, 0xcf, 0x0f, 0xcd, 0xb6, 0xb0,
	0xa7, 0x7c, 0x17, 0x95, 0x0d, 0x17, 0x4a, 0x2c, 0xaa, 0x2a, 0xfa, 0x44, 0x87, 0x6b, 0xc5, 0x26,
	0x36, 0x5e, 0x1e, 0xa1, 0x39, 0x45, 0x50, 0x91, 0x53, 0x66, 0x5b, 0x78, 0x45, 0x6e, 0x01, 0x1b,
	0xf4, 0x83, 0xd0, 0x29, 0xa3, 0x83, 0x63, 0xb5, 0x2d, 0x1c, 0x2a, 0x1f, 0xbc, 0xf3, 0x37, 0xca,
	0x16, 0xa8, 0x8d, 0x42, 0x80, 0xb9, 0xfc, 0xdd, 0xa6, 0x59, 0x75, 0xc0, 0x7b, 0xd0, 0xe7, 0x61,
	0x10, 0xbd, 0xb0, 0xba, 0x65, 0x7f, 0x41, 0x02, 0x5a, 0xeb, 0x81, 0x3b, 0x0b, 0xec, 0x94, 0x2d,
	0x2d, 0xf3, 0xa9, 0x17, 0xb8, 0xd8, 0x9d, 0x3d, 0x7e, 0x3e, 0x7c, 0x27, 0xc5, 0xcf, 0x76, 0x59,
	0x2e, 0x64, 0xec, 0x27, 0x7b, 0x12, 0x89, 0x21, 0xf2, 0xc4, 0xa8, 0x77, 0x5b, 0xf6, 0xaa, 0x4d,
	0xcd, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0xdf, 0xb7, 0x68, 0xe9, 0x01, 0x00, 0x00,
}
